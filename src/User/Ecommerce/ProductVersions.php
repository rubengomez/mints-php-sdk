<?php
namespace Mints\User\Ecommerce;
use Mints\MintsHelper;

trait ProductVersions {
    ##
    # === Get Product versions.
    # Get a collection of product versions.
    #
    # ==== Parameters
    # options:: (Hash) -- List of {Resource collection Options}[#class-Mints::Pub-label-Resource+collections+options+] shown above can be used as parameter.
    # use_post:: (Boolean) -- Variable to determine if the request is by 'post' or 'get' functions.
    #
    # ==== First Example
    #     $data = $mintsUser->getProductVersions();
    #
    # ==== Second Example
    #     $options = ['fields' => 'title'];
    #     $data = $mintsUser->getProductVersions($options);
    #
    # ==== Third Example
    #     $options = ['fields' => 'title'];
    #     $data = $mintsUser->getProductVersions($options, false);
    public function getProductVersions($options = null, $use_post = true) {
        return MintsHelper::getQueryResults($this->client, '/ecommerce/product-versions', $options, $use_post);
    }

    ##
    # === Get Product version.
    # Get a single product version.
    #
    # ==== Parameters
    # slug:: (String) -- It's the string identifier generated by Mints.
    # options:: (Hash) -- List of {Single Resource Options}[#class-Mints::Pub-label-Single+resource+options] shown above can be used as parameter.
    #
    # ==== First Example
    #     $data = $mintsUser->getProductVersion("product_slug");
    #
    # ==== Second Example
    #     $options = [
    #         'fields' => 'id, slug'
    #     ];
    #     $data = $mintsUser->getProductVersion("lego-set", $options);
    public function getProductVersion($slug, $options = null) {
        return $this->client->raw('get', "/ecommerce/product-versions/{$slug}", $options);
    }

    # === Create product version.
    # Create a product version with data.
    #
    # ==== Parameters
    # data:: (Hash) -- Data to be submitted.
    #
    # ==== Example
    #     $data = [
    #         'title' => 'New Product Version',
    #         'slug' => 'new-product-version',
    #         'product_id' => 1
    #     ];
    #     $data = $mintsUser->createProductVersion($data);
    public function createProductVersion($data, $options = null) {
        return $this->client->raw('post', '/ecommerce/product-versions', $options, $this->dataTransform($data));
    }

    # === Update product version.
    # Update a product version info.
    #
    # ==== Parameters
    # id:: (Integer) -- Product version id.
    # data:: (Hash) -- Data to be submitted.
    #
    # ==== Example
    #     $data = [
    #         'title' => 'New Product Version Modified',
    #         'slug' => 'new-product-version',
    #         'product_id' => 1
    #     ];
    #     $data = $mintsUser->updateProductVersion(9, $data);
    public function updateProductVersion($id, $data, $options = null) {
        return $this->client->raw('put', "/ecommerce/product-versions/{$id}", $options, $this->dataTransform($data));
    }

    # === Delete product version.
    # Delete a product version.
    #
    # ==== Parameters
    # id:: (Integer) -- Product version id.
    #
    public function deleteProductVersion($id) {
        return $this->client->raw('delete', "/ecommerce/product-versions/{$id}");
    }

    # === Publish product version.
    # Publish a product version.
    #
    # ==== Parameters
    # id:: (Integer) -- Product version id.
    # data:: (Hash) -- Data to be submitted.
    #
    # ==== Example
    #     $data = [
    #         'title' => 'New Publish'
    #     ];
    #     $data = $mintsUser->publishProductVersion(2, $data);
    public function publishProductVersion($id, $data) {
        return $this->client->raw('put', "/ecommerce/product-versions/{$id}/publish", null, $this->dataTransform($data));
    }
}
